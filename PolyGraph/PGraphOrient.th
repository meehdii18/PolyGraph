#pragma once
#include "PGraphOrient.h"

//METHODES PRIVEES

/******************************************************
* GPOTrouverSommet
*******************************************************
* Entree : sIdentifiant l'identifiant du sommet cherche
* Necessite : Rien
* Sortie : Un pointeur vers le sommet si il est dans le
* graphe, nullptr sinon
* Entraine : Rien
******************************************************/
template<class TArc, class TSommet>
inline TSommet* PGraphOrient<TArc, TSommet>::GPOTrouverSommet(const string& sIdentifiant) const
{
	vector<TSommet*> vSMTListeSommets = vGPOListeSommets;
	unsigned int uiBoucle = 0;
	unsigned int uiCritereArret = (unsigned int)vSMTListeSommets.size();

	while (uiBoucle < uiCritereArret)
	{
		if (vSMTListeSommets[uiBoucle]->SMTLireIdentifiant() == sIdentifiant)
		{
			return vSMTListeSommets[uiBoucle];
		}
		uiBoucle++;
	}
	return nullptr;
}

/******************************************************
* GPOTrouverArc
*******************************************************
* Entree : sOrigine et sDestination l'origine et la
* destination de l'arc cherche
* Necessite : Rien
* Sortie : Un pointeur vers le'arc si il est dans le
* graphe, nullptr sinon
* Entraine : Rien
******************************************************/
template<class TArc, class TSommet>
inline TArc* PGraphOrient<TArc, TSommet>::GPOTrouverArc(const string& sOrigine, const string& sDestination) const
{
	vector<TArc*> vARCListeArcs = vGPOListeArcs;
	unsigned int uiBoucle = 0;
	unsigned int uiCritereArret = (unsigned int)vARCListeArcs.size();

	while (uiBoucle < uiCritereArret)
	{
		if (vARCListeArcs[uiBoucle]->ARCLireOrigine() == sOrigine and vARCListeArcs[uiBoucle]->ARCLireDestination() == sDestination)
		{
			return vARCListeArcs[uiBoucle];
		}
		uiBoucle++;
	}
	return nullptr;
}

//CONSTRUCTEURS ET DESTRUCTEURS

/******************************************************
* ~PGraphOrient
*******************************************************
* Entree : Rien
* Necessite : Rien
* Sortie : Rien
* Entraine : Le graphe est detruit, avec les sommets et
* les arcs le composant
******************************************************/
template<class TArc, class TSommet>
inline PGraphOrient<TArc, TSommet>::~PGraphOrient()
{
	unsigned int uiBoucle = 0;
	unsigned int uiCritereArret = (unsigned int)vGPOListeSommets.size();

	for (uiBoucle; uiBoucle < uiCritereArret; uiBoucle++)
	{
		GPOSupprimerSommet(vGPOListeSommets[uiBoucle]->SMTLireIdentifiant());
	}
}

//METHODES

/******************************************************
* GPOLireListeArcs
*******************************************************
* Entree : Rien
* Necessite : Rien
* Sortie : Le vecteur contenant les arcs du graphe
* Entraine : Rien
******************************************************/
template<class TArc, class TSommet>
inline vector<vector<string>> PGraphOrient<TArc, TSommet>::GPOLireListeArcs() const
{
	vector<vector<string>> vvsAffichageArcs;

	unsigned int uiBoucle;
	unsigned int uiCritereArret = (unsigned int)vGPOListeArcs.size();

	for (uiBoucle = 0; uiBoucle < uiCritereArret; uiBoucle++)
	{
		vector<string> vsArc;

		vsArc.push_back(vGPOListeArcs[uiBoucle]->ARCLireOrigine());

		vsArc.push_back(vGPOListeArcs[uiBoucle]->ARCLireDestination());

		vvsAffichageArcs.push_back(vsArc);
	}

	return vvsAffichageArcs;
}

/******************************************************
* GPOLireListeSommets
*******************************************************
* Entree : Rien
* Necessite : Rien
* Sortie : Le vecteur contenant les identifiants des
* sommets du graphe
* Entraine : Rien
******************************************************/
template<class TArc, class TSommet>
inline vector<string> PGraphOrient<TArc, TSommet>::GPOLireListeSommets() const
{
	vector<string> vsAffichageSommets;

	unsigned int uiBoucle;
	unsigned int uiCritereArret = (unsigned int)vGPOListeSommets.size();

	for (uiBoucle = 0; uiBoucle < uiCritereArret; uiBoucle++)
	{
		vsAffichageSommets.push_back(vGPOListeSommets[uiBoucle]->SMTLireIdentifiant());
	}

	return vsAffichageSommets;
}

/******************************************************
* GPOLirePredecesseursSommets
*******************************************************
* Entree : Rien
* Necessite : Rien
* Sortie : Le vecteur contenant les identifiants des
* sommets depuis lesquels des arcs du graphe viennent
* au sommet d'identifiant sIDSommet
* Entraine : Rien
******************************************************/
template<class TArc, class TSommet>
inline vector<string> PGraphOrient<TArc, TSommet>::GPOLirePredecesseursSommet(const string& sIdSommet) const
{
	TSommet* SMTCourant = GPOTrouverSommet(sIdSommet);

	vector<TArc*> vARCArcsEntrants = SMTCourant->SMTLireArcsEntrants();

	vector<string> vsAffichagePredecesseurs;

	unsigned int uiBoucle;
	unsigned int uiCritereArret = (unsigned int)vARCArcsEntrants.size();

	for (uiBoucle = 0; uiBoucle < uiCritereArret; uiBoucle++)
	{
		vsAffichagePredecesseurs.push_back(vARCArcsEntrants[uiBoucle]->ARCLireOrigine());
	}

	return vsAffichagePredecesseurs;
}

/******************************************************
* GPOLireSuccesseursSommets
*******************************************************
* Entree : Rien
* Necessite : Rien
* Sortie : Le vecteur contenant les identifiants des
* sommets vers lesquels des arcs du graphe vont depuis
* le sommet d'identifiant sIDSommet
* Entraine : Rien
******************************************************/
template<class TArc, class TSommet>
inline vector<string> PGraphOrient<TArc, TSommet>::GPOLireSuccesseursSommet(const string& sIdSommet) const
{
	TSommet* SMTCourant = GPOTrouverSommet(sIdSommet);

	vector<TArc*> vARCArcsSortants = SMTCourant->SMTLireArcsSortants();

	vector<string> vsAffichageSuccesseurs;

	unsigned int uiBoucle;
	unsigned int uiCritereArret = (unsigned int)vARCArcsSortants.size();

	for (uiBoucle = 0; uiBoucle < uiCritereArret; uiBoucle++)
	{
		vsAffichageSuccesseurs.push_back(vARCArcsSortants[uiBoucle]->ARCLireDestination());
	}

	return vsAffichageSuccesseurs;
}

/******************************************************
* GPOAjouterSommet
*******************************************************
* Entree : sIdentifiant l'identifiant du sommet a creer
* Necessite : Rien
* Sortie : Rien
* Entraine : La creation d'un sommet d'identifiant
* sIdentifiant, puis l'ajout de ce sommet dans
* vGPOListeSommets.
******************************************************/
template<class TArc, class TSommet>
inline void PGraphOrient<TArc, TSommet>::GPOAjouterSommet(const string& sIdentifiant)
{
	if (GPOTrouverSommet(sIdentifiant) != nullptr)
	{
		ostringstream ssMessageErreur;

		ssMessageErreur << "Le sommet d'identifiant ";
		ssMessageErreur << sIdentifiant.c_str();
		ssMessageErreur << " existe deja dans le graphe et n'a donc pas ete ajoute.";

		string sDescription = ssMessageErreur.str();

		throw logic_error(sDescription);
	}

	TSommet* SMTNouveau = new TSommet(sIdentifiant);

	vGPOListeSommets.push_back(SMTNouveau);
}

/******************************************************
* GPOSupprimerSommet
*******************************************************
* Entree : sIdentifiant l'identifiant du sommet a
* supprimer
* Necessite : Rien
* Sortie : Rien
* Entraine : La suppression du sommet d'identifiant
* sIdentifiant du graphe
******************************************************/
template<class TArc, class TSommet>
inline void PGraphOrient<TArc, TSommet>::GPOSupprimerSommet(const string& sIdentifiant)
{
	TSommet* SMTAncienSommet = GPOTrouverSommet(sIdentifiant);

	vector<TArc*> vARCArcsEntrants = SMTAncienSommet->SMTLireArcsEntrants();
	vector<TArc*> vARCArcsSortants = SMTAncienSommet->SMTLireArcsSortants();
	unsigned int uiBoucle;
	unsigned int uiCritereArret;

	if (SMTAncienSommet == nullptr)
	{
		ostringstream ssMessageErreur;

		ssMessageErreur << "Le sommet d'identifiant "; 
		ssMessageErreur << sIdentifiant.c_str();
		ssMessageErreur << " n'existe pas dans le graphe et n'a donc pas ete supprime.";

		string sDescription = ssMessageErreur.str();

		throw logic_error(sDescription);
	}

	uiCritereArret = (unsigned int)vARCArcsEntrants.size();

	for (uiBoucle = 0; uiBoucle < uiCritereArret; uiBoucle++)
	{
		GPOSupprimerArc(vARCArcsEntrants[uiBoucle]->ARCLireOrigine(), sIdentifiant);
	}

	uiCritereArret = (unsigned int)vARCArcsSortants.size();

	for (uiBoucle = 0; uiBoucle < uiCritereArret; uiBoucle++)
	{
		GPOSupprimerArc(sIdentifiant, vARCArcsSortants[uiBoucle]->ARCLireDestination());
	}

	vGPOListeSommets.erase(remove_if(vGPOListeSommets.begin(),
		vGPOListeSommets.end(),
		[&](TSommet* SMTElement) {return SMTElement->SMTLireIdentifiant() == sIdentifiant; }),
		vGPOListeSommets.end());

	delete SMTAncienSommet;
}

/******************************************************
* GPOModifierIdentifiantSommet
*******************************************************
* Entree : sIdentifiant l'identifiant a modifier
* sNouvelIdenfiant le nouvel identifiant du sommet
* Necessite : Rien
* Sortie : Rien
* Entraine : La modification de l' identifiant du
* sommet
******************************************************/
template<class TArc, class TSommet>
inline void PGraphOrient<TArc, TSommet>::GPOModifierIdentifiantSommet(const string& sIdentifiant, const string& sNouvelIdentifiant)
{
	TSommet* SMTAncienSommet = GPOTrouverSommet(sIdentifiant);
	TSommet* SMTNouveauSommet = GPOTrouverSommet(sNouvelIdentifiant);

	vector<TArc*> vARCArcsEntrants = SMTAncienSommet->SMTLireArcsEntrants();
	vector<TArc*> vARCArcsSortants = SMTAncienSommet->SMTLireArcsSortants();
	unsigned int uiBoucle;
	unsigned int uiCritereArret;


	if (SMTAncienSommet == nullptr)
	{
		ostringstream ssMessageErreur;

		ssMessageErreur << "Le sommet d'identifiant ";
		ssMessageErreur << sIdentifiant.c_str();
		ssMessageErreur << " n'existe pas dans le graphe et n'a donc pas ete renomme.";

		string sDescription = ssMessageErreur.str();

		throw logic_error(sDescription);
	}
	if (SMTNouveauSommet != nullptr)
	{
		ostringstream ssMessageErreur;

		ssMessageErreur << "Le sommet d'identifiant ";
		ssMessageErreur << sNouvelIdentifiant.c_str();
		ssMessageErreur << " existe deja dans le graphe et n'a donc pas pu etre assigne a nouveau.";

		string sDescription = ssMessageErreur.str();

		throw logic_error(sDescription);
	}

	uiCritereArret = (unsigned int)vARCArcsEntrants.size();

	for (uiBoucle = 0; uiBoucle < uiCritereArret; uiBoucle++)
	{
		vARCArcsEntrants[uiBoucle]->ARCModifierDestination(sNouvelIdentifiant);
	}

	uiCritereArret = (unsigned int)vARCArcsSortants.size();

	for (uiBoucle = 0; uiBoucle < uiCritereArret; uiBoucle++)
	{
		vARCArcsSortants[uiBoucle]->ARCModifierOrigine(sNouvelIdentifiant);
	}

	SMTAncienSommet->SMTModifierIdentifiant(sNouvelIdentifiant);
}

/******************************************************
* GPOAjouterArc
*******************************************************
* Entree : sOrigine et sDestination l'origine et la
* destination de l'arc a creer
* Necessite : Rien
* Sortie : Rien
* Entraine : La creation d'un arc reliant les sommets
* d'origine et de destination, si ceux-ci existent et
* si l'arc n'existe pas.
******************************************************/
template<class TArc, class TSommet>
inline void PGraphOrient<TArc, TSommet>::GPOAjouterArc(const string& sOrigine, const string& sDestination)
{
	TSommet* SMTOrigine = GPOTrouverSommet(sOrigine);
	TSommet* SMTDestination = GPOTrouverSommet(sDestination);

	if (SMTOrigine == nullptr)
	{
		ostringstream ssMessageErreur;

		ssMessageErreur << "Le sommet ";
		ssMessageErreur << sOrigine.c_str();
		ssMessageErreur << " n'existe pas dans le graphe et ne peut donc pas servir d'origine.";

		string sDescription = ssMessageErreur.str();

		throw logic_error(sDescription);
	}
	if (SMTDestination == nullptr)
	{
		ostringstream ssMessageErreur;

		ssMessageErreur << "Le sommet ";
		ssMessageErreur << sDestination.c_str();
		ssMessageErreur << " n'existe pas dans le graphe et ne peut donc pas servir de destination.";

		string sDescription = ssMessageErreur.str();

		throw logic_error(sDescription);
	}
	if (GPOTrouverArc(sOrigine, sDestination) != nullptr)
	{
		ostringstream ssMessageErreur;

		ssMessageErreur << "L'arc d'origine ";
		ssMessageErreur << sOrigine.c_str();
		ssMessageErreur << " et de destination ";
		ssMessageErreur << sDestination.c_str();
		ssMessageErreur << " existe deja dans le graphe et n'a donc pas ete ajoute.";

		string sDescription = ssMessageErreur.str();

		throw logic_error(sDescription);
	}

	TArc* ARCNouveau = new TArc(sOrigine, sDestination);

	SMTOrigine->SMTAjouterArcSortant(ARCNouveau);

	SMTDestination->SMTAjouterArcEntrant(ARCNouveau);

	vGPOListeArcs.push_back(ARCNouveau);
}

/******************************************************
* GPOSupprimerArc
*******************************************************
* Entree : sOrigine et sDestination l'origine et la
* destination de l'arc a supprimer
* Necessite : Rien
* Sortie : Rien
* Entraine : La suppression de l'arc reliant les
* sommets d'origine et de destination
******************************************************/
template<class TArc, class TSommet>
inline void PGraphOrient<TArc, TSommet>::GPOSupprimerArc(const string& sOrigine, const string& sDestination)
{
	TArc* ARCAncienArc = GPOTrouverArc(sOrigine, sDestination);
	TSommet* SMTOrigine = GPOTrouverSommet(sOrigine);
	TSommet* SMTDestination = GPOTrouverSommet(sDestination);

	if (ARCAncienArc == nullptr)
	{
		ostringstream ssMessageErreur;

		ssMessageErreur << "L'arc d'origine ";
		ssMessageErreur << sOrigine.c_str();
		ssMessageErreur << " et de destination ";
		ssMessageErreur << sDestination.c_str();
		ssMessageErreur << " n'existe pas dans le graphe et n'a donc pas ete supprime.";

		string sDescription = ssMessageErreur.str();

		throw logic_error(sDescription);
	}

	SMTOrigine->SMTSupprimerArcSortant(ARCAncienArc);

	SMTDestination->SMTSupprimerArcEntrant(ARCAncienArc);

	vGPOListeArcs.erase(remove_if(vGPOListeArcs.begin(),
		vGPOListeArcs.end(),
		[&](TArc* ARCElement) {return ARCElement->ARCLireOrigine() == sOrigine and ARCElement->ARCLireDestination() == sDestination; }),
		vGPOListeArcs.end());

	delete ARCAncienArc;
}

